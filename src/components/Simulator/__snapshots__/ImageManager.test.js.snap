// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render image manager component tests has one instance of image manager 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Wrapper
    handleBulbPopoverClose={[MockFunction]}
    handleBulbPopoverOpen={[MockFunction]}
    handleHeartPopoverClose={[MockFunction]}
    handleHeartPopoverOpen={[MockFunction]}
    handleHeringPopoverClose={[MockFunction]}
    handleHeringPopoverOpen={[MockFunction]}
    handleParaSympaPopoverClose={[MockFunction]}
    handleParaSympaPopoverOpen={[MockFunction]}
    handlePopoverClose={[MockFunction]}
    handlePopoverOpen={[MockFunction]}
    handleSpinalPopoverClose={[MockFunction]}
    handleSpinalPopoverOpen={[MockFunction]}
    handleSympateticPopoverClose={[MockFunction]}
    handleSympateticPopoverOpen={[MockFunction]}
    handleToggleNerveSection={[MockFunction]}
    showNerve={false}
    t={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "handleBulbPopoverClose": [MockFunction],
      "handleBulbPopoverOpen": [MockFunction],
      "handleHeartPopoverClose": [MockFunction],
      "handleHeartPopoverOpen": [MockFunction],
      "handleHeringPopoverClose": [MockFunction],
      "handleHeringPopoverOpen": [MockFunction],
      "handleParaSympaPopoverClose": [MockFunction],
      "handleParaSympaPopoverOpen": [MockFunction],
      "handlePopoverClose": [MockFunction],
      "handlePopoverOpen": [MockFunction],
      "handleSpinalPopoverClose": [MockFunction],
      "handleSpinalPopoverOpen": [MockFunction],
      "handleSympateticPopoverClose": [MockFunction],
      "handleSympateticPopoverOpen": [MockFunction],
      "handleToggleNerveSection": [MockFunction],
      "i18n": Object {},
      "showNerve": false,
      "t": [Function],
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "handleBulbPopoverClose": [MockFunction],
        "handleBulbPopoverOpen": [MockFunction],
        "handleHeartPopoverClose": [MockFunction],
        "handleHeartPopoverOpen": [MockFunction],
        "handleHeringPopoverClose": [MockFunction],
        "handleHeringPopoverOpen": [MockFunction],
        "handleParaSympaPopoverClose": [MockFunction],
        "handleParaSympaPopoverOpen": [MockFunction],
        "handlePopoverClose": [MockFunction],
        "handlePopoverOpen": [MockFunction],
        "handleSpinalPopoverClose": [MockFunction],
        "handleSpinalPopoverOpen": [MockFunction],
        "handleSympateticPopoverClose": [MockFunction],
        "handleSympateticPopoverOpen": [MockFunction],
        "handleToggleNerveSection": [MockFunction],
        "i18n": Object {},
        "showNerve": false,
        "t": [Function],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
